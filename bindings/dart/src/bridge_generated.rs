#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_register_token_impl(
    port_: MessagePort,
    id: impl Wire2Api<String> + UnwindSafe,
    token: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "register_token",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            let api_token = token.wire2api();
            move |task_callback| Ok(register_token(api_id, api_token))
        },
    )
}
fn wire_forward_message_impl(
    port_: MessagePort,
    receiver_id: impl Wire2Api<String> + UnwindSafe,
    data: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "forward_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_receiver_id = receiver_id.wire2api();
            let api_data = data.wire2api();
            move |task_callback| Ok(forward_message(api_receiver_id, api_data))
        },
    )
}
fn wire_query_by_sn_impl(
    port_: MessagePort,
    receiver_id: impl Wire2Api<String> + UnwindSafe,
    sn: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "query_by_sn",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_receiver_id = receiver_id.wire2api();
            let api_sn = sn.wire2api();
            move |task_callback| Ok(query_by_sn(api_receiver_id, api_sn))
        },
    )
}
fn wire_query_by_digest_impl(
    port_: MessagePort,
    receiver_id: impl Wire2Api<String> + UnwindSafe,
    digests: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "query_by_digest",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_receiver_id = receiver_id.wire2api();
            let api_digests = digests.wire2api();
            move |task_callback| Ok(query_by_digest(api_receiver_id, api_digests))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
